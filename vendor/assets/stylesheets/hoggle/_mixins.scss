/// Generates a media query based on a list of conditions
///
/// @author Eduardo Boucas
///
/// @param {List}   $conditions  - Media query conditions
///
/// @example scss - With a single set breakpoint
///  @include media(">phone") { }
///
/// @example scss - With two set breakpoints
///  @include media(">phone", "<=tablet") { }
///
/// @example scss - With custom values
///  @include media(">=358px", "<850px") { }
///
/// @example scss - With set breakpoints with custom values
///  @include media(">desktop", "<=1350px") { }
///
/// @example scss - With a static expression
///  @include media("retina2x") { }
///
/// @example scss - Mixing everything
///  @include media(">=350px", "<tablet", "retina3x") { }
///
@mixin media($conditions...) {
  @for $i from 1 through length($conditions) {
    $conditions: set-nth($conditions, $i, parse-expression(nth($conditions, $i)));
  }

  $branches: get-query-branches($conditions);
  $query: '';

  @each $branch in $branches {
    @if (str-length($query) != 0) {
      $query: $query + ', ';
    }

    $query: $query + $branch;
  }

  @media #{$query} {
    @content;
  }
}



/*
clearfix is attached to the .clearfix class
*/
@mixin clearfix {

  &:after {
    content: '';
    display: block;
    clear: both;
  }
}

/*
swap mixin is attached to the .swap class
*/
@mixin swap {

  &.swap {
    direction: rtl;

    > * {
      direction: ltr;
    }

    > .swap {
      direction: inherit;
    }
  }
}

/*
Generate grid classes, as well as hide / show classes off of $sizes array. 
Since some elements may beed to be shown with block and others with inline-block, 
the hide / show classes may need to be split into to versions for flexibility.

2 column mobile example:

  .small-1of2

8 column desktop example:

  .large-1of8

hide on mobile:

  .hide-x-small

*/
@mixin grid-classes($breakpoint) {

  /* Create grid classes */

  @include media('>#{nth($breakpoint, 2)}') {

    /* Columns */
    .#{nth($breakpoint, 1)}-1of1 {
      width: percentage(1/1) !important;
    }

    .#{nth($breakpoint, 1)}-1of2 {
      width: percentage(1/2) !important;
    }

    .#{nth($breakpoint, 1)}-1of3 {
      width: percentage(1/3) !important;
    }

    .#{nth($breakpoint, 1)}-2of3 {
      width: percentage(2/3) !important;
    }

    .#{nth($breakpoint, 1)}-1of4 {
      width: percentage(1/4) !important;
    }

    .#{nth($breakpoint, 1)}-3of4 {
      width: percentage(3/4) !important;
    }

    .#{nth($breakpoint, 1)}-1of8 {
      width: percentage(1/8) !important;
    }

    .#{nth($breakpoint, 1)}-3of8 {
      width: percentage(3/8) !important;
    }

    .#{nth($breakpoint, 1)}-5of8 {
      width: percentage(5/8) !important;
    }

    .#{nth($breakpoint, 1)}-7of8 {
      width: percentage(7/8) !important;
    }

    /* Offsets */

    .#{nth($breakpoint, 1)}-offset-1of2 {
      margin-left: percentage(1/2);
    }

    .#{nth($breakpoint, 1)}-offset-1of3 {
      margin-left: percentage(1/3);
    }

    .#{nth($breakpoint, 1)}-offset-2of3 {
      margin-left: percentage(2/3);
    }

    .#{nth($breakpoint, 1)}-offset-1of4 {
      margin-left: percentage(1/4);
    }

    .#{nth($breakpoint, 1)}-offset-3of4 {
      margin-left: percentage(3/4);
    }

    .#{nth($breakpoint, 1)}-offset-1of8 {
      margin-left: percentage(1/8);
    }

    .#{nth($breakpoint, 1)}-offset-3of8 {
      margin-left: percentage(3/8);
    }

    .#{nth($breakpoint, 1)}-offset-5of8 {
      margin-left: percentage(5/8);
    }

    .#{nth($breakpoint, 1)}-offset-7of8 {
      margin-left: percentage(7/8);
    }
  }

  @include media('>#{nth($breakpoint, 2)}') {

    .show-#{nth($breakpoint, 1)} {
      display: block;
    }

    .hide-#{nth($breakpoint, 1)} {
      display: none;
    }
  }
}

/*
Build the grid classes
*/
@each $breakpoint in $breakpoints {
  @include grid-classes($breakpoint);
}
